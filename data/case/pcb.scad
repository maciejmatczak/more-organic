// Generated by SolidPython 1.0.2 on 2020-10-25 09:47:37
$fa = 6;
$fs = .1;


projection(cut = true) {
	color(c = [1, 1, 0.8000000000, 0.5000000000]) {
		linear_extrude(height = 1.6000000000) {
			offset(r = -2) {
				offset(r = 2) {
					union() {
						offset(r = -12) {
							offset(r = 16) {
								union() {
									intersection() {
										offset(r = -10) {
											offset(r = 10) {
												translate(v = [-16.2000000000, -42.8000000000]) {
													rotate(a = 180.0000000000) {
														polygon(paths = [[0, 1, 2, 3]], points = [[-1.5000000000, 1.5000000000], [8, 1.5000000000], [8, -6], [-1.5000000000, -6]]);
													}
												}
												translate(v = [-40.0000000000, -2.0000000000]) {
													color(c = [0.3000000000, 0.3000000000, 0.3000000000]) {
														mirror(v = [0, 1, 0]) {
															polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7]], points = [[-5.3500000000, 12.1000000000], [5.3500000000, 12.1000000000], [5.3500000000, 0], [5.1000000000, 0], [5.1000000000, -2], [-5.1000000000, -2], [-5.1000000000, 0], [-5.3500000000, 0]]);
														}
													}
												}
												translate(v = [-24.0000000000, -17.8000000000]) {
													rotate(a = -90.0000000000) {
														color(c = [0.0040000000, 0.2274509804, 0.5764705882, 0.5000000000]) {
															polygon(paths = [[0, 1, 2, 3]], points = [[-17.8000000000, 8.9000000000], [15.2000000000, 8.9000000000], [15.2000000000, -8.9000000000], [-17.8000000000, -8.9000000000]]);
														}
													}
												}
												translate(v = [-39.8000000000, -21.2000000000]) {
													rotate(a = -90.0000000000) {
														polygon(paths = [[0, 1, 2, 3]], points = [[-4.7000000000, -1.1000000000], [4.7000000000, -1.1000000000], [4.7000000000, 1.1000000000], [-4.7000000000, 1.1000000000]]);
													}
												}
												translate(v = [-43.3000000000, -21.2000000000]) {
													rotate(a = -90.0000000000) {
														polygon(paths = [[0, 1, 2, 3]], points = [[-4.7000000000, -1.1000000000], [4.7000000000, -1.1000000000], [4.7000000000, 1.1000000000], [-4.7000000000, 1.1000000000]]);
													}
												}
												translate(v = [-36.1000000000, -18.6000000000]) {
													rotate(a = 180.0000000000) {
														polygon(paths = [[0, 1, 2, 3]], points = [[-1.6500000000, -1.2400000000], [1.6500000000, -1.2400000000], [1.6500000000, 1.2400000000], [-1.6500000000, 1.2400000000]]);
													}
												}
												translate(v = [-36.1000000000, -24.4000000000]) {
													polygon(paths = [[0, 1, 2, 3]], points = [[-1.6500000000, -1.2400000000], [1.6500000000, -1.2400000000], [1.6500000000, 1.2400000000], [-1.6500000000, 1.2400000000]]);
												}
											}
										}
										translate(v = [0, -4]) {
											offset(r = -10) {
												offset(r = 10) {
													translate(v = [-16.2000000000, -42.8000000000]) {
														rotate(a = 180.0000000000) {
															polygon(paths = [[0, 1, 2, 3]], points = [[-1.5000000000, 1.5000000000], [8, 1.5000000000], [8, -6], [-1.5000000000, -6]]);
														}
													}
													translate(v = [-40.0000000000, -2.0000000000]) {
														color(c = [0.3000000000, 0.3000000000, 0.3000000000]) {
															mirror(v = [0, 1, 0]) {
																polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7]], points = [[-5.3500000000, 12.1000000000], [5.3500000000, 12.1000000000], [5.3500000000, 0], [5.1000000000, 0], [5.1000000000, -2], [-5.1000000000, -2], [-5.1000000000, 0], [-5.3500000000, 0]]);
															}
														}
													}
													translate(v = [-24.0000000000, -17.8000000000]) {
														rotate(a = -90.0000000000) {
															color(c = [0.0040000000, 0.2274509804, 0.5764705882, 0.5000000000]) {
																polygon(paths = [[0, 1, 2, 3]], points = [[-17.8000000000, 8.9000000000], [15.2000000000, 8.9000000000], [15.2000000000, -8.9000000000], [-17.8000000000, -8.9000000000]]);
															}
														}
													}
													translate(v = [-39.8000000000, -21.2000000000]) {
														rotate(a = -90.0000000000) {
															polygon(paths = [[0, 1, 2, 3]], points = [[-4.7000000000, -1.1000000000], [4.7000000000, -1.1000000000], [4.7000000000, 1.1000000000], [-4.7000000000, 1.1000000000]]);
														}
													}
													translate(v = [-43.3000000000, -21.2000000000]) {
														rotate(a = -90.0000000000) {
															polygon(paths = [[0, 1, 2, 3]], points = [[-4.7000000000, -1.1000000000], [4.7000000000, -1.1000000000], [4.7000000000, 1.1000000000], [-4.7000000000, 1.1000000000]]);
														}
													}
													translate(v = [-36.1000000000, -18.6000000000]) {
														rotate(a = 180.0000000000) {
															polygon(paths = [[0, 1, 2, 3]], points = [[-1.6500000000, -1.2400000000], [1.6500000000, -1.2400000000], [1.6500000000, 1.2400000000], [-1.6500000000, 1.2400000000]]);
														}
													}
													translate(v = [-36.1000000000, -24.4000000000]) {
														polygon(paths = [[0, 1, 2, 3]], points = [[-1.6500000000, -1.2400000000], [1.6500000000, -1.2400000000], [1.6500000000, 1.2400000000], [-1.6500000000, 1.2400000000]]);
													}
												}
											}
										}
									}
									translate(v = [32.0750000000, -86.2000000000]) {
										rotate(a = -30.0000000000) {
											translate(v = [-7.8000000000, -7.0000000000]) {
												polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
											}
										}
									}
									translate(v = [9.5250000000, -81.2000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [-11.7250000000, -83.4000000000]) {
										rotate(a = 15.0000000000) {
											translate(v = [-7.8000000000, -7.0000000000]) {
												polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
											}
										}
									}
									translate(v = [95.2500000000, -80.1500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [76.2000000000, -75.1500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [57.1500000000, -49.1500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [38.1000000000, -45.1500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [19.0500000000, -57.1500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [0.0000000000, -62.1500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [95.2500000000, -61.1000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [76.2000000000, -56.1000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [57.1500000000, -30.1000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [38.1000000000, -26.1000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [19.0500000000, -38.1000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [0.0000000000, -43.1000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [95.2500000000, -42.0500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [76.2000000000, -37.0500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [57.1500000000, -11.0500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [38.1000000000, -7.0500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [19.0500000000, -19.0500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [0.0000000000, -24.0500000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [95.2500000000, -23.0000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [76.2000000000, -18.0000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [57.1500000000, 8.0000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [38.1000000000, 12.0000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [19.0500000000, -0.0000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
									translate(v = [0.0000000000, -5.0000000000]) {
										translate(v = [-7.8000000000, -7.0000000000]) {
											polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]], points = [[0.8000000000, 0], [14.8000000000, 0], [14.8000000000, 1], [15.6000000000, 1], [15.6000000000, 4.5000000000], [14.8000000000, 4.5000000000], [14.8000000000, 9.5000000000], [15.6000000000, 9.5000000000], [15.6000000000, 13], [14.8000000000, 13], [14.8000000000, 14], [0.8000000000, 14], [0.8000000000, 13], [0, 13], [0, 9.5000000000], [0.8000000000, 9.5000000000], [0.8000000000, 4.5000000000], [0, 4.5000000000], [0, 1], [0.8000000000, 1]]);
										}
									}
								}
							}
						}
						offset(r = 2) {
							union() {
								translate(v = [63.6750000000, -61.6750000000]) {
									circle(r = 1.2500000000);
								}
								translate(v = [12.0250000000, -69.1750000000]) {
									circle(r = 1.2500000000);
								}
								translate(v = [69.6750000000, -5.4750000000]) {
									circle(r = 1.2500000000);
								}
								translate(v = [25.5750000000, 12.5250000000]) {
									circle(r = 1.2500000000);
								}
								translate(v = [-31.0000000000, -39.0000000000]) {
									circle(r = 1.2500000000);
								}
								translate(v = [-18.0000000000, -48.0000000000]) {
									circle(r = 1.2500000000);
								}
								translate(v = [-44.0000000000, -30.0000000000]) {
									circle(r = 1.2500000000);
								}
							}
						}
					}
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#!/usr/bin/env python
from itertools import combinations
from copy import copy
import json
import argparse
from pathlib import Path
from solid import *
from solid.utils import *  # Not required, but the utils module is useful
from solid import rotate as _rotate
import sys

from switch import switch_cutout, switch_bbox, switch_courtyard
from misc import (arduino_pro_micro_2d, trrs, switch_6mm, jumper,
                  resistor_hybrid,  m4_hole, m4_screw, m2_hole, m2_screw)


OPENSCAD_HEADER = '$fa = 6;\n$fs = .1;'

UNIT = 19.05

# Plate design settings
PLATE_MELT_GROW = 16
PLATE_MELT_D = 3
PLATE_MELT_SHRINK = PLATE_MELT_GROW - PLATE_MELT_D

# PCB design settings
PCB_MELT_GROW = 16
PCB_MELT_D = 4
PCB_MELT_SHRINK = PCB_MELT_GROW - PCB_MELT_D

PCB_PLATE_Z = 5
PCB_SCREW_M4_CLEARENCE = 4
PCB_SCREW_M2_CLEARENCE = 2


def melt(obj, grow, shrink):
    return offset(-shrink)(offset(grow)(obj))


def make_switches(design):
    # keeps all bboxes of switches
    switch_bboxes = []

    # keeps all switches cutouts
    switch_cutouts = []

    # keeps all switches courtyards
    switch_courtyards = []

    for element in design:
        x = element['x']
        y = element['y']
        orientation = element['orientation']

        sw = copy(switch_cutout)
        sw_bbox = copy(switch_bbox)
        sw_courtyard = copy(switch_courtyard)

        # if name == 'SW27':
        #     sw = debug(sw)

        if orientation:
            sw = rotate(orientation)(sw)
            sw_bbox = rotate(orientation)(sw_bbox)
            sw_courtyard = rotate(orientation)(sw_courtyard)

        sw = translate([x, y])(sw)
        sw_courtyard = translate([x, y])(sw_courtyard)

        sw_bbox = translate([x, y, PCB_PLATE_Z+5])(sw_bbox)

        switch_cutouts.append(sw)
        switch_bboxes.append(sw_bbox)
        switch_courtyards.append(sw_courtyard)

    return switch_cutouts, switch_bboxes, switch_courtyards


def make_screws(design, screw_model, hole_model):
    screws = []
    holes = []

    for element in design:
        x = element['x']
        y = element['y']

        holes += translate(
            [x, y]
        )(hole_model)

        screws += translate(
            [x, y]
        )(screw_model)

    return screws, holes


def make_other_elements(design):
    full_footprint = []
    mapping = {
        'Button_Switch_THT:SW_PUSH_6mm_H7.3mm': switch_6mm,
        'Jumper:SolderJumper-2_P1.3mm_Open_RoundedPad1.0x1.5mm': jumper,
        'keebio-footprints:ArduinoProMicro': arduino_pro_micro_2d,
        'keebio-footprints:TRRS-PJ-320A-dual': trrs,
        'keebio-footprints:Resistor-Hybrid': resistor_hybrid,
    }

    for element in design:
        footprint = element['footprint']
        try:
            model = mapping[footprint]
        except KeyError:
            print(f'Unknown footprint {footprint}')
            sys.exit(1)

        x = element['x']
        y = element['y']
        orientation = element['orientation']

        if orientation:
            model = rotate(orientation)(model)

        model = translate([x, y])(model)

        full_footprint.append(model)

    return full_footprint, up(1.6 + .1)(linear_extrude(2)(full_footprint))


def case(design_switches, design_diodes, design_other_elements, design_mh_m2,
         design_mh_standoff):

    m4_screws, m4_holes = make_screws(design_mh_standoff, m4_screw, m4_hole)
    m4_holes_clearence = offset(PCB_SCREW_M4_CLEARENCE)(m4_holes)

    m4_screws = up(PCB_PLATE_Z + 1.6 + .001)(m4_screws)

    m2_screws, m2_holes = make_screws(design_mh_m2, m2_screw, m2_hole)
    m2_holes_clearence = offset(PCB_SCREW_M2_CLEARENCE)(m2_holes)

    m2_screws = up(PCB_PLATE_Z + 1.6 + .001)(m2_screws)

    switch_cutouts, switch_bboxes, switch_courtyards = make_switches(
        design_switches)

    other_elements_footprint, other_elements_representation =\
        make_other_elements(design_other_elements)

    other_elements_footprint_melted = melt(
        other_elements_footprint, 10, 10
    )
    other_elements_footprint_cut =\
        intersection()(
            other_elements_footprint_melted,
            translate([0, -PCB_MELT_D])(
                other_elements_footprint_melted
            )
        )

    plate = melt(switch_courtyards,
                 PLATE_MELT_GROW, PLATE_MELT_SHRINK)

    plate = melt(plate + m4_holes_clearence, 20, 20)

    plate -= switch_cutouts

    collisions = []
    for bbox_1, bbox_2 in combinations(switch_bboxes, r=2):
        collisions += bbox_1 * bbox_2

    pcb = melt(
        switch_cutouts + other_elements_footprint_cut,
        PCB_MELT_GROW, PCB_MELT_SHRINK
    )
    pcb = melt(pcb + m2_holes_clearence, 2, 2)

    cover = melt(
        other_elements_footprint_cut,
        PCB_MELT_GROW, PCB_MELT_SHRINK
    )
    cover = melt(
        cover + m2_holes_clearence,
        2, 2
    )
    cover -= translate([-2, 0, 0])(plate)
    cover = melt(cover, -2, -2)

    cover = linear_extrude(1.6)(cover)
    pcb = linear_extrude(1.6)(pcb)
    plate = linear_extrude(1.6)(plate)

    collisions = color(Red)(collisions)
    pcb = color([1, 1, .8, .5])(pcb)
    cover = color([.8, .85, 1, .5])(cover)
    plate = color([.8, .85, 1, .5])(plate)
    m4_screws = color([.3, .3, .3, .4])(m4_screws)
    m2_screws = color([.3, .3, .3, .4])(m2_screws)

    assembly =\
        pcb +\
        other_elements_representation + m4_screws + m2_screws +\
        up(PCB_PLATE_Z)(plate) +\
        up(PCB_PLATE_Z*2)(cover) +\
        switch_bboxes + collisions

    return assembly, pcb, plate, cover


def kicad2openscad(design):
    translated_design = []

    for element in design:
        element['y'] *= -1
        element['orientation'] = (element['orientation'] + 90) % 360 - 90

        # element['orientation'] *= -1
        translated_design.append(element)

    return translated_design


def split_kicad_dump(kicad_dump):
    design_switches = []
    design_diodes = []
    design_other_elements = []
    design_mh_m2 = []

    mapping = {
        'keyswitches:Kailh_socket_MX_optional_reversible_alt': design_switches,
        'keebio-footprints:Diode-dual': design_diodes,
        'MountingHole_2.2mm_M2_Pad_Via': design_mh_m2,
        'Button_Switch_THT:SW_PUSH_6mm_H7.3mm': design_other_elements,
        'Jumper:SolderJumper-2_P1.3mm_Open_RoundedPad1.0x1.5mm': design_other_elements,
        'keebio-footprints:ArduinoProMicro': design_other_elements,
        'keebio-footprints:TRRS-PJ-320A-dual': design_other_elements,
        'keebio-footprints:Resistor-Hybrid': design_other_elements,
    }
    for element in kicad_dump:
        footprint = element['footprint']
        try:
            list_ = mapping[footprint]
            list_.append(element)
        except KeyError:
            print(f'Unknown element\'s footprint {element}')
            sys.exit(1)

    return design_switches, design_diodes, design_other_elements, design_mh_m2


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Creates scad file and dxf for case'
    )
    parser.add_argument(
        '--kicad-dump', type=lambda p: Path(p).resolve(),
        required=True,
        help='Input path from kicad dump.'
    )
    parser.add_argument(
        '--mh-standoff', type=lambda p: Path(p).resolve(),
        required=True,
        help='Input path for standoffs'
    )
    parser.add_argument(
        '-o', '--output-path', type=lambda p: Path(p).resolve(),
        required=True,
        help='Output directory of the case files.'
    )
    args = parser.parse_args()

    kicad_dump = json.loads(args.kicad_dump.read_text())
    kicad_dump = kicad2openscad(kicad_dump)
    design_switches, design_diodes, design_other_elements, design_mh_m2 =\
        split_kicad_dump(kicad_dump)

    design_mh_standoff = json.loads(args.mh_standoff.read_text())
    design_mh_standoff = kicad2openscad(design_mh_standoff)

    assembly, pcb, plate, cover = case(
        design_switches, design_diodes,
        design_other_elements,
        design_mh_m2, design_mh_standoff
    )

    # 3 files - one main/full/assembly, for png, rest is used directly to use
    # export separate pieces

    scad_render_to_file(
        assembly, args.output_path / 'assembly.scad',
        file_header=OPENSCAD_HEADER,
        include_orig_code=True)

    pcb_projection = projection(cut=True)(
        pcb
    )
    scad_render_to_file(
        pcb_projection, args.output_path / 'pcb.scad',
        file_header=OPENSCAD_HEADER,
        include_orig_code=True)

    plate_projection = projection(cut=True)(
        plate
    )
    scad_render_to_file(
        plate_projection, args.output_path / 'plate.scad',
        file_header=OPENSCAD_HEADER,
        include_orig_code=True)

    cover_projection = projection(cut=True)(
        cover
    )
    scad_render_to_file(
        cover_projection, args.output_path / 'cover.scad',
        file_header=OPENSCAD_HEADER,
        include_orig_code=True)
 
 
************************************************/
